library(swirl)
swirl()
5+7
x <- 5 + 7
x
y <- x - 3
y
z <- c(1.1, 9, 3.14)
?c
z
z2 <- c(z, 555)
info()
c(z, 555, z)
z * 2 + 100
z
my_sqrt <- sqrt(z - 1)
my_sqrt
my_div <- z / my_sqrt
my_div
vecrecy <- c(1, 2, 3, 4) + c(0, 10)
vecrecy
c(1, 2, 3, 4) + c(0, 10)
c(1, 2, 3, 4) + c(0, 10, 100)
z * 2 + 1000
my_div
bye()
exit()
exit
close
esc
quit
save.image("C:\\Users\\Dhan\\Work\\DataScience\\Swirl\\Swirl Lesson 1 basic building blocks.RData")
q
quit(save = "default", status = 0, runLast = TRUE)
swirl
cube <- function(x, n) {
x^3
}
x
setwd("~/Desktop/Online Coursera/Coursera-R-Programming/week2/")
getwd
getwd()
setwd(dir)
setwd("C:/Users/Dhan/Work/DataScience/R/Week2")
setwd("~/Desktop/Online Coursera/Coursera-R-Programming/week2/")
dir.create(path, showWarnings = TRUE, recursive = FALSE)
getwd
getwd()
setwd("C:/Users/Dhan/Work/DataScience/R/Week2)
getwd()
print
(TRUE != FALSE) == !(6 == 7)
library(datasets)
data(iris)
iris
mn <- c(sepal.length, mean)
mean(sepal.length, virginica)
str(iris)
head(iris)
virginica<-subset(iris,Species == 'virginica')
sl<-data.frame(virginica$Sepal.Length)
sl<-data.frame(iris$Sepal.Length[iris$Species=="virginica"])
sl
summary(sl)
apply(iris[, 1:4], 2, mean)# by columns
# Sepal.Length  Sepal.Width Petal.Length  Petal.Width
library(datasets)
data(mtcars)
mtcars
?mtcars
?mtcars
mean(mtcars$mpg, mtcars$cyl)
tapply(mtcars$cyl, mtcars$mpg, mean)
tapply(mtcars$cyl, mtcars$mpg, mean)
sapply(split(mtcars$mpg, mtcars$cyl), mean)
with(mtcars, tapply(mpg, cyl, mean))
abs(mean(split(mtcars, mtcars$cyl)$'4'$hp) - mean(split(mtcars, mtcars$cyl)$'8'$hp))
abs(mean(mtcars$hp[mtcars$cyl==4])-mean(mtcars$hp[mtcars$cyl==8]))
debug(ls)
LS
ls
tapply(mtcars$mpg, mtcars$cyl, mean)
quit()
getwd()
setwd("C:/Users/Dhan/Work/DataScience/R/Programming Assignment 3/rprog-data-ProgAssignment3-data")
getwd()
outcome <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
outcome <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
best <- function(state, outcome) {
## Read outcome data
## Check that state and outcome are valid
## Return hospital name in that state with lowest 30-day death
## rate
source("sortHospitalsByOutcome.R")
head(sortHospitalsByOutcome(state, outcome), 1)
}
getwd()
source(best.R)
source("best.R")
best("TX", "heart attack")
rankhospital("NC", "heart attack", "worst")
rankhospital <- function(state, outcome, num = "best") {
## Read outcome data
## Check that state and outcome are valid
## Return hospital name in that state with the given rank
## 30-day death rate
source("C:/Users/Dhan/Work/DataScience/R/Programming Assignment 3/rprog-data-ProgAssignment3-data/best.R")
source("C:/Users/Dhan/Work/DataScience/R/Programming Assignment 3/rprog-data-ProgAssignment3-data/sortHospitalsByOutcome.R")
if (num=="best") {
best(state, outcome)
} else if (num=="worst") {
tail(sortHospitalsByOutcome(state, outcome), 1)
} else {
sortHospitalsByOutcome(state, outcome)[num]
}
}
rankhospital("NC", "heart attack", "worst")
##outcomeCol.R
outcomeCol <- function(outcome) {
if (outcome == "heart attack") {
outcome <- "Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack"
} else if (outcome == "heart failure") {
outcome <- "Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure"
} else if (outcome == "pneumonia") {
outcome <- "Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia"
}
else {
stop("invalid outcome")
}
}
outcomeCol()
rankhospital("NC", "heart attack", "worst")
